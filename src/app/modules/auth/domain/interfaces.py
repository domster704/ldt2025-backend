from collections.abc import Callable, Awaitable
from typing import Protocol, Optional
from .entities import App, Tokens
from .value_objects import AccessToken, RefreshToken

class AuthProvider(Protocol):
    async def exchange_code(self, code: str) -> Tokens: ...
    async def refresh(self, token: RefreshToken) -> Tokens: ...
    async def logout(self, token: RefreshToken) -> None: ...
    async def verify(self, token: AccessToken) -> dict: ...

class UserRepository(Protocol):
    async def get_by_sub(self, sub: str) -> Optional[App]: ...
    async def upsert_from_claims(self, claims: dict) -> App: ...

TokenVerifier = Callable[[AccessToken], Awaitable[dict]]